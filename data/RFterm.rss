/*
============================================================================
 Name        : RFterm.rss
 Author      : Konstantin Baranovskiy
 Copyright   : GPLv3
 Description : This file contains all the resources for the RFterm.
============================================================================
*/
//  RESOURCE IDENTIFIER
NAME RFTM	// 4 letter ID


//  INCLUDES
#include <eikon.rh>
#include <avkon.rsg>
#include <avkon.rh>
#include <appinfo.rh>
#include "RFterm.hrh"
#include "RFterm.rls"

//  RESOURCE DEFINITIONS
// -----------------------------------------------------------------------------
//
//	Define the resource file signature
//	This resource should be empty.
//
// -----------------------------------------------------------------------------
//
RESOURCE RSS_SIGNATURE
	{
	}

// -----------------------------------------------------------------------------
//
//	Default Document Name
//
// -----------------------------------------------------------------------------
//
RESOURCE TBUF r_default_document_name
	{
	buf="RFTM";
	}

// -----------------------------------------------------------------------------
//
//	Define default menu and CBA key.
//
// -----------------------------------------------------------------------------
//
RESOURCE EIK_APP_INFO
	{
	menubar = r_menubar;
	cba = R_AVKON_SOFTKEYS_OPTIONS_EXIT;
	}


// -----------------------------------------------------------------------------
//
//   r_menubar
//   Main menubar
//
// -----------------------------------------------------------------------------
//
RESOURCE MENU_BAR r_menubar
	{
	titles =
		{
		MENU_TITLE { menu_pane = r_menu; }
		};
	}


// -----------------------------------------------------------------------------
//
//   r_menu
//   Menu for "Options"
//
// -----------------------------------------------------------------------------
//
RESOURCE MENU_PANE r_menu
	{
	items =
		{
		// added the new Options menu command here
		MENU_ITEM
				{
				command = ERFtermSend;
				cascade = r_send_menu;
				txt = qtn_send;
				},
		MENU_ITEM
				{
				command = ERFtermClear;
				txt = qtn_clear;
				},
		MENU_ITEM
				{
				command = ERFtermSave;
				txt = qtn_save;
				},
		MENU_ITEM
				{
				command = ERFtermConnect;
				txt = qtn_connect;
				},
		MENU_ITEM
				{
				command = ERFtermDisconnect;
				txt = qtn_disconnect;
				},
		MENU_ITEM
				{
				command = ERFtermStart;
				txt = qtn_start;
				},
		MENU_ITEM
				{
				command = ERFtermStop;
				txt = qtn_stop;
				},
		MENU_ITEM
				{
				command = ERFtermSettings;
				txt = qtn_settings;
				},
		MENU_ITEM
				{
				command = ERFtermHelp;
				txt = qtn_help;
				},
		MENU_ITEM
				{
				command = EAknSoftkeyExit;
				txt = qtn_exit;
				}
		};
	}

RESOURCE MENU_PANE r_send_menu
	{
	items =
		{
		MENU_ITEM
				{
				command = ERFtermMessage;
				txt = qtn_send_message;
				},
		MENU_ITEM
				{
				command = ERFtermHistory;
				txt = qtn_send_history;
				},
		MENU_ITEM
				{
				command = ERFtermCtrlChar;
				txt = qtn_send_ctrl_char;
				},
		MENU_ITEM
				{
				command = ERFtermFile;
				txt = qtn_send_file;
				}
		};
	}


// -----------------------------------------------------------------------------
//
// Resources for messages.
//
// -----------------------------------------------------------------------------
//
RESOURCE TBUF32 r_caption_string { buf=qtn_caption_string; }
RESOURCE TBUF r_msg_connected_text { buf=qtn_msg_connected; }

RESOURCE TBUF r_rfterm_service_name { buf=qtn_rfterm_service_name; }
RESOURCE TBUF r_rfterm_service_description { buf=qtn_rfterm_service_description; }

RESOURCE TBUF r_str_ignoresym_confirmation { buf=qtn_str_ignoresym_confirmation; }

RESOURCE TBUF r_str_navi_disconnected { buf=qtn_str_navi_disconnected; }

RESOURCE TBUF r_str_disconnected { buf=qtn_str_disconnected; }
RESOURCE TBUF r_str_disconnect_complete { buf=qtn_str_disconnect_complete; }
RESOURCE TBUF r_str_connected { buf=qtn_str_connected; }
RESOURCE TBUF r_str_found_service { buf=qtn_str_found_service; }
RESOURCE TBUF r_str_client_busy { buf=qtn_str_client_busy; }
RESOURCE TBUF r_str_releasing_conn { buf=qtn_str_releasing_conn; }
RESOURCE TBUF r_str_connecting { buf=qtn_str_connecting; }
RESOURCE TBUF r_str_waiting_conn { buf=qtn_str_waiting_conn; }
RESOURCE TBUF r_str_port_number { buf=qtn_str_port_number; }
RESOURCE TBUF r_str_bell { buf=qtn_str_bell; }
RESOURCE TBUF r_str_output_is_saved { buf=qtn_str_output_is_saved; }
RESOURCE TBUF r_str_file_is_sent { buf=qtn_str_file_is_sent; }
//RESOURCE TBUF r_str_ { buf=qtn_str_; }


RESOURCE TBUF r_err_no_bt { buf=qtn_err_no_bt; }
RESOURCE TBUF r_err_no_device_selected { buf=qtn_err_no_device_selected; }
RESOURCE TBUF r_err_cant_get_device_list { buf=qtn_err_cant_get_device_list; }
RESOURCE TBUF r_err_connection_error { buf=qtn_err_connection_error; }
RESOURCE TBUF r_err_lost_connection { buf=qtn_err_lost_connection; }
RESOURCE TBUF r_err_message_failed { buf=qtn_err_message_failed; }
RESOURCE TBUF r_err_file_sending_failed { buf=qtn_err_file_sending_failed; }
RESOURCE TBUF r_err_failed_to_disconnect { buf=qtn_err_failed_to_disconnect; }
RESOURCE TBUF r_err_no_conn { buf=qtn_err_no_conn; }
RESOURCE TBUF r_err_nrrc_error { buf=qtn_err_nrrc_error; }
RESOURCE TBUF r_err_nrrc_no_records { buf=qtn_err_nrrc_no_records; }
RESOURCE TBUF r_err_cant_get_attribute { buf=qtn_err_cant_get_attribute; }
RESOURCE TBUF r_err_attr_req_com { buf=qtn_err_attr_req_com; }
RESOURCE TBUF r_err_registry { buf=qtn_err_registry; }
RESOURCE TBUF r_err_file_opening { buf=qtn_err_file_opening; }
//RESOURCE TBUF r_err_ { buf=qtn_err_; }

// ---------------------------------------------------------------------------- 
//
// r_localisable_app_info
//
// ---------------------------------------------------------------------------- 
//
RESOURCE LOCALISABLE_APP_INFO r_localisable_app_info
	{
	short_caption = qtn_caption_string;
	caption_and_icon = 
	CAPTION_AND_ICON_INFO
		{
		caption = qtn_caption_string;

		number_of_icons = 1;
		icon_file = "\\resource\\apps\\RFterm_0xae7f53fa.mif";
		};
	}

//----------------------------------------------------
//
//    r_dialog_text_query
//    Recource of Text query
//
//----------------------------------------------------
//

/*
RESOURCE DIALOG r_text_query_special_char_table
	{
	flags = EGeneralQueryFlags | EEikDialogFlagNoBorder | EEikDialogFlagNoShadow;
	buttons = R_AVKON_SOFTKEYS_OK_CANCEL;
	items=
		{
		DLG_LINE
			{
			type = EAknCtPopupHeadingPane;
			id = EAknSCTQueryHeadingId;
			control = AVKON_HEADING
				{
				label = "Extended ASCII:";
				headinglayout = R_AVKON_SCT_LIST_HEADING_PANE;
				};
			},
		DLG_LINE
			{
			type = EAknCtSpecialCharacterMap;
			id = EAknSCTQueryContentId;
			control = SPECIAL_CHAR_TABLE
				{
				contents =
					{
					SCT_CHAR_SET
						{
						id = EAknSCTLowerCase;
//						chars = "+;@äö";
//						chars = "юаб";
						chars = <0x044e><0x0430><0x0431>;
						},
					SCT_CHAR_SET
						{
						id = EAknSCTUpperCase;
//						chars = "+;@ÄÖ";
//						chars = "ЮАБ";
						chars = <0x042e><0x0410><0x0411>;
						}
					};
				};
			}
		};
	}
*/

RESOURCE DIALOG r_dialog_text_query
	{
	flags = EGeneralQueryFlags;
	buttons = R_AVKON_SOFTKEYS_OK_CANCEL;

	items =
		{
		DLG_LINE
			{
			id = EGeneralQuery;
			type = EAknCtQuery;
			control = AVKON_DATA_QUERY
				{
				layout = EDataLayout;
				label = qtn_str_text_query_label;
				control = EDWIN
					{
					flags = EEikEdwinNoHorizScrolling | EEikEdwinResizable /*| EEikEdwinOnlyASCIIChars*/;
//					avkon_flags = EAknEditorFlagLatinInputModesOnly;
					allowed_case_modes = EAknEditorUpperCase | EAknEditorLowerCase;
					default_case = EAknEditorLowerCase;
//					special_character_table = r_text_query_special_char_table;
					width = 5;
					maxlength = 128;
					// added to limit expanding in forms.
					// If you want full screen use 6 here
					max_view_height_in_lines = 1;
					// if you have the line above, you must have this.
					// It's calculable from LAF
//					base_line_delta = 21;
					};
				};
			}
		};
	}

//----------------------------------------------------
//
//    r_dialog_ignoresym_confirmation_query
//    Recource of confirmation query to ignore
//      unsupported symbols
//
//----------------------------------------------------
//

RESOURCE DIALOG r_dialog_ignoresym_confirmation_query
	{
	flags = EGeneralQueryFlags;
	buttons = R_AVKON_SOFTKEYS_YES_NO;
	items =
		{
		DLG_LINE
			{
			type = EAknCtQuery;
			id = EGeneralQuery;
			control = AVKON_CONFIRMATION_QUERY
				{
				layout = EConfirmationQueryLayout;
				label = "";
				};
			}
		};
	}

//----------------------------------------------------
//
//    r_dialog_history_query
//    Recource of Message History query
//
//----------------------------------------------------
//

RESOURCE DIALOG r_dialog_history_query
	{
	flags = EGeneralQueryFlags;
	buttons = R_AVKON_SOFTKEYS_OK_CANCEL;
	items =
		{
		AVKON_LIST_QUERY_DLG_LINE
			{
			control = AVKON_LIST_QUERY_CONTROL
				{
				listtype = EAknCtSinglePopupMenuListBox;
				listbox = AVKON_LIST_QUERY_LIST
					{
					};
				heading = qtn_str_history_query_label;
				};
			}
		};
	}

//----------------------------------------------------
//
//    r_dialog_ctrlchar_query
//    Recource of Control Character query
//
//----------------------------------------------------
//

RESOURCE ARRAY r_ctrlchar_items
	{
	items =
		{
		LBUF { txt = "^M - CARRIAGE RETURN"; },
		LBUF { txt = "^J - LINE FEED"; },
		LBUF { txt = "^I - TABULATION"; },
		LBUF { txt = "^H - BACKSPACE"; },
		LBUF { txt = "^G - BELL"; },
		LBUF { txt = "^L - FORM FEED"; },
		LBUF { txt = "^@ - NULL"; },
		LBUF { txt = "^M^J - CR+LF"; },
		LBUF { txt = "Custom..."; }
		};
	}

RESOURCE DIALOG r_dialog_ctrlchar_query
	{
	flags = EGeneralQueryFlags;
	buttons = R_AVKON_SOFTKEYS_OK_CANCEL;
	items =
		{
		AVKON_LIST_QUERY_DLG_LINE
			{
			control = AVKON_LIST_QUERY_CONTROL
				{
				listtype = EAknCtSinglePopupMenuListBox;
				listbox = AVKON_LIST_QUERY_LIST
					{
					array_id = r_ctrlchar_items;
					};
				heading = qtn_str_ctrlchar_query_label;
				};
			}
		};
	}

//----------------------------------------------------
//
//    r_dialog_int_query
//    Recource of integer query
//
//----------------------------------------------------
//

RESOURCE DIALOG r_dialog_int_query
	{
	flags = EGeneralQueryFlags;
	buttons = R_AVKON_SOFTKEYS_OK_CANCEL;

	items =
		{
		DLG_LINE
			{
			type = EAknCtQuery;
			id = EGeneralQuery;
			control = AVKON_DATA_QUERY
				{
				layout = ENumberLayout;
				label = qtn_str_int_query_label;
				control = AVKON_INTEGER_EDWIN
					{
					maxlength = 3;
					min = 0;
					max = 255;
					};
				};
			}
		};
	}

//----------------------------------------------------
//
//    r_settings_dialog
//    Recource of settings dialog
//
//----------------------------------------------------
//

RESOURCE DIALOG r_settings_dialog
	{
	flags = EEikDialogFlagNoBorder | EEikDialogFlagNoDrag |
			EEikDialogFlagNoTitleBar | EEikDialogFlagFillAppClientRect |
			EEikDialogFlagCbaButtons | EEikDialogFlagWait;
	buttons = R_AVKON_SOFTKEYS_EDIT_DONE;
	pages = setting_pages;
	}

RESOURCE ARRAY setting_pages
	{
	items =
		{
		PAGE
			{
			id = ESettingPageInput;
			text = qtn_str_settings_input_label;
			form = settings_input_form;
			},
		PAGE
			{
			id = ESettingPageOutput;
			text = qtn_str_settings_output_label;
			form = settings_output_form;
			}
		};
	}

RESOURCE FORM settings_input_form
	{
	flags = EEikFormUseDoubleSpacedFormat;
	items =
		{
		DLG_LINE
			{
			id = ESettingAppendix;
			type = EAknCtPopupFieldText;
			prompt = qtn_str_setting_appendix_label;
			itemflags = EEikDlgItemTakesEnterKey;
			control = POPUP_FIELD_TEXT
				{
				textarray = setting_appendix_items;
				popupfield = POPUP_FIELD {};
				active = 0;
				};
			},
		DLG_LINE
			{
			id = ESettingHistorySize;
			type = EEikCtNumberEditor;
			prompt = qtn_str_setting_historysize_label;
			itemflags = EEikDlgItemTakesEnterKey;
			control = NUMBER_EDITOR
				{
				min = 0;
				max = 15;
				};
			},
		DLG_LINE
			{
			id = ESettingEcho;
			type = EAknCtPopupFieldText;
			prompt = qtn_str_setting_echo_label;
			itemflags = EEikDlgItemTakesEnterKey;
			control = POPUP_FIELD_TEXT
				{
				textarray = setting_onoff_items;
				popupfield = POPUP_FIELD {};
				active = 0;
				};
			}
		};
	}

RESOURCE ARRAY setting_appendix_items
	{
	items =
		{
		LBUF { txt = qtn_str_setting_appendix_item0; },
		LBUF { txt = qtn_str_setting_appendix_item1; },
		LBUF { txt = qtn_str_setting_appendix_item2; },
		LBUF { txt = qtn_str_setting_appendix_item3; }
		};
	}

RESOURCE ARRAY setting_onoff_items
	{
	items =
		{
		LBUF { txt = qtn_str_setting_off_label; },
		LBUF { txt = qtn_str_setting_on_label; }
		};
	}

RESOURCE FORM settings_output_form
	{
	flags = EEikFormUseDoubleSpacedFormat;
	items =
		{
		DLG_LINE
			{
			id = ESettingFontSize;
			type = EAknCtSlider;
			prompt = qtn_str_setting_fontsize_label;
			itemflags = EEikDlgItemTakesEnterKey;
			control = SLIDER
				{
				layout = EAknFormSliderLayout1;
				minvalue = 80;
				maxvalue = 160;
				step = 1;
				valuetype = EAknSliderValueDecimal;
				minlabel = "min";
				maxlabel = "max";
				};
			},
		DLG_LINE
			{
			id = ESettingTabSize;
			type = EAknCtSlider;
			prompt = qtn_str_setting_tabsize_label;
			itemflags = EEikDlgItemTakesEnterKey;
			control = SLIDER
				{
				layout = EAknFormSliderLayout1;
				minvalue = 1;
				maxvalue = 8;
				step = 1;
				valuetype = EAknSliderValueDecimal;
				minlabel = "min";
				maxlabel = "max";
				};
			},
		DLG_LINE
			{
			id = ESettingMapping;
			type = EAknCtPopupFieldText;
			prompt = qtn_str_setting_mapping_label;
			itemflags = EEikDlgItemTakesEnterKey;
			control = POPUP_FIELD_TEXT
				{
				textarray = setting_mapping_items;
				popupfield = POPUP_FIELD {};
				active = 0;
				};
			},
		DLG_LINE
			{
			id = ESettingCodePage;
			type = EAknCtPopupFieldText;
			prompt = qtn_str_setting_codepage_label;
			itemflags = EEikDlgItemTakesEnterKey;
			control = POPUP_FIELD_TEXT
				{
				textarray = setting_codepage_items;
				popupfield = POPUP_FIELD {};
				active = 0;
				};
			}
		};
	}

RESOURCE ARRAY setting_mapping_items
	{
	items =
		{
		LBUF { txt = qtn_str_setting_mapping_item0; },
		LBUF { txt = qtn_str_setting_mapping_item1; },
		LBUF { txt = qtn_str_setting_mapping_item2; },
		LBUF { txt = qtn_str_setting_mapping_item3; },
		LBUF { txt = qtn_str_setting_mapping_item4; }
		};
	}

RESOURCE ARRAY setting_codepage_items
	{
	items =
		{
		LBUF { txt = qtn_str_setting_codepage_item0; },
		LBUF { txt = qtn_str_setting_codepage_item1; },
		LBUF { txt = qtn_str_setting_codepage_item2; },
		LBUF { txt = qtn_str_setting_codepage_item3; },
		LBUF { txt = qtn_str_setting_codepage_item4; },
		LBUF { txt = qtn_str_setting_codepage_item5; },
		LBUF { txt = qtn_str_setting_codepage_item6; },
		LBUF { txt = qtn_str_setting_codepage_item7; }
		};
	}

// End of File
